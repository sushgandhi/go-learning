from docx import Document
from docx.shared import Inches
import markdown2
from bs4 import BeautifulSoup
import requests
import os

def markdown_to_docx(md_content, docx_file):
    # Convert Markdown to HTML
    html_content = markdown2.markdown(md_content, extras=["tables", "fenced-code-blocks", "strike", "cuddled-lists"])

    # Parse HTML using BeautifulSoup
    soup = BeautifulSoup(html_content, "html.parser")

    # Create a DOCX document
    doc = Document()

    for element in soup.contents:
        if element.name in ["h1", "h2", "h3", "h4", "h5", "h6"]:
            level = int(element.name[1])
            doc.add_heading(element.text, level=level)

        elif element.name == "p":
            doc.add_paragraph(element.text)

        elif element.name == "ul":
            for li in element.find_all("li"):
                doc.add_paragraph(f"• {li.text}")

        elif element.name == "ol":
            for i, li in enumerate(element.find_all("li"), start=1):
                doc.add_paragraph(f"{i}. {li.text}")

        elif element.name == "blockquote":
            para = doc.add_paragraph()
            para.add_run(element.text).italic = True

        elif element.name == "hr":
            doc.add_paragraph("─" * 30)

        elif element.name == "code":
            para = doc.add_paragraph()
            para.add_run(element.text).font.name = "Courier New"

        elif element.name == "table":
            rows = element.find_all("tr")
            if rows:
                table = doc.add_table(rows=len(rows), cols=len(rows[0].find_all(["th", "td"])))
                for r_idx, row in enumerate(rows):
                    for c_idx, cell in enumerate(row.find_all(["th", "td"])):
                        table.cell(r_idx, c_idx).text = cell.text

        elif element.name == "img":
            img_src = element.get("src")
            if img_src:
                try:
                    img_data = requests.get(img_src).content
                    img_path = "temp_image.png"
                    with open(img_path, "wb") as img_file:
                        img_file.write(img_data)
                    doc.add_picture(img_path, width=Inches(2))
                    os.remove(img_path)
                except:
                    doc.add_paragraph("[Image not found]")

        elif element.name == "a":
            doc.add_paragraph(f"{element.text} ({element.get('href')})")

    # Save as DOCX
    doc.save(docx_file)

# Example Markdown content
md_content = """
# Heading 1
This is a description for Heading 1.

## Heading 2
This is a description for Heading 2.

### Heading 3
This is a description for Heading 3.

---

**This text is bold.**  
*This text is italicized.*  
***This text is both bold and italicized.***

## Lists
- Item 1
- Item 2

1. Step 1
2. Step 2

## Code
